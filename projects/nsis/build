#!/bin/bash
[% c("var/set_default_env") -%]

[% pc(c('var/build-toolchain'), 'var/setup', { build_toolchain_tarfile => c('input_files_by_name/build-toolchain') }) %]
tar -C $builddir -xf nsis-[% c('version') %].tar.bz2

# We need the GNU assembler for the system plugin
tar -C $distdir -xf [% c('input_files_by_name/binutils') %]

# NSIS requires zlib and we later set the path using ZLIB_W32.
tar -C $builddir -xf [% c('input_files_by_name/zlib') %]

# This trick is adapted from Firefox's
# taskcluster/scripts/misc/build-mingw32-nsis.sh
compiler_prefix=$distdir/toolchain-windows-clang/bin/[% c("var/compiler_target") %]
cat <<'EOF' >"$compiler_prefix-gcc"
#!/bin/sh
# SCons ignores the external $PATH, so we add binutils here.
export PATH=/var/tmp/rbm/dist/binutils/bin:$PATH
case "$@" in
*/Call*.S)
  $(dirname $0)/[% c("var/compiler_target") %]-clang -fno-integrated-as "$@"
  ;;
*)
  $(dirname $0)/[% c("var/compiler_target") %]-clang "$@"
  ;;
esac
EOF

chmod +x "$compiler_prefix-gcc"
ln -s "$compiler_prefix-clang++" "$compiler_prefix-g++"

cd $builddir/nsis-[% c('version') %]-src

# These two sed commands also come from build-mingw32-nsis.sh
sed -i 's/-Wl,--exclude-libs,msvcrt.a/-Wl,-Xlink=-fixed/' SCons/Config/gnu
sed -i '2i extern "C"' SCons/Config/{memcpy,memset}.c
export SOURCE_DATE_EPOCH=$(stat -c '%Y' Source)
# Resource.dll does not obey the source date epoch...
patch -p1 < "$rootdir/resource-reproducible.diff"

[% IF c("var/windows-x86_64") %]
  # Seems like setting TARGET_ARCH is not enough so we need to patch build.cpp
  # manually; this is confirmed by a comment in the same file.
  sed -i 's/m_target_type=TARGET_X86UNICODE/m_target_type=TARGET_AMD64/' Source/build.cpp
  [% SET target = "amd64" %]
[% ELSE %]
  [% SET target = "x86" %]
[% END %]

[% SET scons_args = 'VERSION=' _ c("version")
        _ " SKIPUTILS='NSIS Menu,Makensisw' XGCC_W32_PREFIX=" _ c("var/compiler_target") _ "-"
        _ " TARGET_ARCH=" _ target
        _ ' ZLIB_W32=$builddir/zlib/'
        _ ' PREFIX=$distdir/nsis' -%]
# Parallel compilation might result in errors, but they seems to be recoverable,
# so we first run scons in parallel, and suppress any error, then we try again,
# but the second time they make the build fail.
scons [% scons_args %] -j[% c("num_procs") %] || true
scons [% scons_args %]
scons [% scons_args %] install

cd $distdir
[% c('tar', {
        tar_src => [ project ],
        tar_args => '-czf ' _ dest_dir _ '/' _ c('filename'),
        }) %]
